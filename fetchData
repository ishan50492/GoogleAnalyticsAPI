"""Hello Analytics Reporting API V4."""

import argparse

from googleapiclient.discovery import build
import httplib2
from oauth2client import client
from oauth2client import file
from oauth2client import tools
from pandas import DataFrame
from datetime import datetime


SCOPES = ['https://www.googleapis.com/auth/analytics.readonly']
DISCOVERY_URI = ('https://analyticsreporting.googleapis.com/$discovery/rest')
CLIENT_SECRETS_PATH = 'client_secrets.json' # Path to client_secrets.json file.
VIEW_ID = '51451732'


def initialize_analyticsreporting():
  """Initializes the analyticsreporting service object.

  Returns:
    analytics an authorized analyticsreporting service object.
  """
  # Parse command-line arguments.
  parser = argparse.ArgumentParser(
      formatter_class=argparse.RawDescriptionHelpFormatter,
      parents=[tools.argparser])
  flags = parser.parse_args([])

  # Set up a Flow object to be used if we need to authenticate.
  flow = client.flow_from_clientsecrets(
      CLIENT_SECRETS_PATH, scope=SCOPES,
      message=tools.message_if_missing(CLIENT_SECRETS_PATH))

  # Prepare credentials, and authorize HTTP object with them.
  # If the credentials don't exist or are invalid run through the native client
  # flow. The Storage object will ensure that if successful the good
  # credentials will get written back to a file.
  storage = file.Storage('analyticsreporting.dat')
  credentials = storage.get()
  if credentials is None or credentials.invalid:
    credentials = tools.run_flow(flow, storage, flags)
  http = credentials.authorize(http=httplib2.Http())

  # Build the service object.
  analytics = build('analytics', 'v4', http=http, discoveryServiceUrl=DISCOVERY_URI)

  return analytics

def get_report(analytics):
  # Use the Analytics Service Object to query the Analytics Reporting API V4.
  return analytics.reports().batchGet(
      body={
        'reportRequests': [
        {
          'viewId': VIEW_ID,
          'dateRanges': [{'startDate': '2017-10-01', 'endDate': '2017-11-01'}],
          'metrics': [
              {'expression': 'ga:pageviews'},
              {'expression': 'ga:sessions'},
              {'expression': 'ga:bounces'},
              {'expression': 'ga:bounceRate'},
              {'expression': 'ga:sessionDuration'},
              {'expression': 'ga:avgSessionDuration'},
              {'expression': 'ga:hits'},
              {'expression': 'ga:users'}],
          'dimensions': [{'name': 'ga:date'}]
        }]
      }
  ).execute()


def print_response(response):
  """Parses and prints the Analytics Reporting API V4 response"""

  for report in response.get('reports', []):
    columnHeader = report.get('columnHeader', {})
    dimensionHeaders = columnHeader.get('dimensions', [])
    metricHeaders = columnHeader.get('metricHeader', {}).get('metricHeaderEntries', [])
    rows = report.get('data', {}).get('rows', [])

    for row in rows:
      dimensions = row.get('dimensions', [])
      dateRangeValues = row.get('metrics', [])

      for header, dimension in zip(dimensionHeaders, dimensions):
        print (header + ': ' + dimension)

      for i, values in enumerate(dateRangeValues):
        print('Date range (' + str(i) + ')')
        for metricHeader, value in zip(metricHeaders, values.get('values')):
          print(metricHeader.get('name') + ': ' + value)

def write_response(response):
  """Parses and prints the Analytics Reporting API V4 response"""

  #Column names
  column1='Dates'
  column2='Page Views'
  column3='Sessions'
  column4='Bounces'
  column5='Bounce Rate'
  column6='Session Duration'
  column7='Avg Session Duration'
  column8='Hits'
  column9='Users'

  #Open a dataframe and write to it
  listDates=[]
  list_pageviews=[]
  list_sessions=[]
  list_bounces=[]
  list_bouncerate=[]
  list_sessionduration=[]
  list_avgsessionduration=[]
  list_hits=[]
  list_users=[]


  for report in response.get('reports', []):
    columnHeader = report.get('columnHeader', {})
    dimensionHeaders = columnHeader.get('dimensions', [])
    metricHeaders = columnHeader.get('metricHeader', {}).get('metricHeaderEntries', [])
    rows = report.get('data', {}).get('rows', [])

    for row in rows:
      dimensions = row.get('dimensions', [])
      dateRangeValues = row.get('metrics', [])

      for header, dimension in zip(dimensionHeaders, dimensions):
        #print (header + ': ' + dimension)
        listDates.append(datetime.strptime(dimension,'%Y%m%d').date())

      for i, values in enumerate(dateRangeValues):
        #print('Date range (' + str(i) + ')')
        for metricHeader, value in zip(metricHeaders, values.get('values')):
            name=metricHeader.get('name')
            name=name.replace(" ","")

            if name == 'ga:pageviews':
                list_pageviews.append(value)
            elif  name=='ga:sessions':
                list_sessions.append(value)
            elif  name=='ga:bounces':
                list_bounces.append(value)
            elif  name=='ga:bounceRate':
                list_bouncerate.append(value)
            elif  name=='ga:sessionDuration':
                list_sessionduration.append(value)
            elif  name=='ga:avgSessionDuration':
                list_avgsessionduration.append(value)
            elif name == 'ga:hits':
                list_hits.append(value)
            elif name=='ga:users':
                list_users.append(value)
  '''
  print("list of pageviews: ",list_pageviews)
  print("list of sessions: ", list_sessions)
  print("list of bounces: ", list_bounces)
  print("list of bounceRate: ", list_bouncerate)
  print("list of sessionDuration: ", list_sessionduration)
  print("list of avgSessionDuration: ", list_avgsessionduration)
  print("list of hits: ", list_hits)
  print("list of users: ", list_users)
  '''
  #Writing the lists to the excel
  df=DataFrame({column1: listDates,column2: list_pageviews,column3:list_sessions,column4:list_bounces,column5:list_bouncerate,column6:list_sessionduration,column7:list_avgsessionduration,column8:list_hits,column9:list_users})

  df.to_excel('output.xlsx',sheet_name='sheet1',index=False)


def main():

  analytics = initialize_analyticsreporting()
  response = get_report(analytics)
  write_response(response)

if __name__ == '__main__':
  main()
